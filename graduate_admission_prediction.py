# -*- coding: utf-8 -*-
"""Graduate Admission Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cZf0_skcsxzmb5kPA1tbmsi4_pR_7rCg
"""

from google.colab import drive
drive.mount('/content/drive')

# Import necessary dependencies
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""#### Load data"""

df = pd.read_csv('/content/Admission_Predict_Ver1.1.csv')

df.head(3)

"""#### Data analysis"""

# info of the dataset

df.info()

# Check for missing values

df.isnull().sum()

# Check for duplicated values


df.duplicated().sum()

# Statistical information

df.describe()

"""#### Data preprocessing"""

# Drop 'Serial No.' column

df = df.drop(columns='Serial No.')

# Split the dataset into X and y

X = df.drop(columns='Chance of Admit ')
y = df['Chance of Admit ']

# Performing train test split

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Min max scalling

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

import tensorflow
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense

"""#### Model building"""

# build the model

model = Sequential()

model.add(Dense(7, activation='relu',input_dim = 7))
model.add(Dense(7, activation='relu'))
model.add(Dense(1,activation='linear'))

# Print the summary

model.summary()

# Complie the model

model.compile(optimizer='adam', loss='mean_squared_error')

# Fit the data

history = model.fit(X_train_scaled, y_train, epochs=100, validation_split=0.2)

# Prediction for test data

y_pred = model.predict(X_test_scaled)

from sklearn.metrics import mean_squared_error, r2_score
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Validation'], loc='upper right')
plt.show()

